{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","_utils/normalizeMovieData.ts","components/FindMovie/FindMovie.tsx","_utils/isResponseError.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","url","fetch","then","res","json","data","catch","Response","Error","normalizeMovieData","movieData","Title","Plot","Poster","imdbID","FindMovie","setMovies","useState","currentSearchTerm","setSearchTerm","currentSearchCount","setSearchCount","currentMovie","setCurrentMovie","isError","setError","isLoading","setLoading","handleFind","a","console","log","prevCount","normalizedMovie","useEffect","htmlFor","type","id","placeholder","cn","onChange","e","term","target","value","onClick","disabled","some","prevMovies","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bca7c20a.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=b6f7cb18';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  const url = `${API_URL}&t=${query}`;\n\n  return fetch(url)\n    .then(res => res.json())\n    .then(data => {\n      return data;\n    })\n    .catch(() => {\n      return {\n        Response: 'False',\n        Error: 'unexpected error',\n      };\n    });\n}\n","import { Movie } from '../types/Movie';\nimport { MovieData } from '../types/MovieData';\n\nexport function normalizeMovieData(movieData: MovieData): Movie {\n  return {\n    title: movieData.Title,\n    description: movieData.Plot,\n    imgUrl: movieData.Poster !== 'N/A'\n      ? movieData.Poster\n      : 'https://via.placeholder.com/360x270.png?text=no%20preview',\n    imdbUrl: `https://www.imdb.com/title/${movieData.imdbID}/`,\n    imdbId: movieData.imdbID,\n  };\n}\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport './FindMovie.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\nimport { getMovie } from '../../api';\nimport { isResponseError } from '../../_utils/isResponseError';\nimport { normalizeMovieData } from '../../_utils/normalizeMovieData';\n\ninterface FindMovieProps {\n  movies: Movie[];\n  setMovies: React.Dispatch<React.SetStateAction<Movie[]>>;\n}\n\nexport const FindMovie: React.FC<FindMovieProps> = ({ movies, setMovies }) => {\n  const [currentSearchTerm, setSearchTerm] = useState<string>('');\n  const [currentSearchCount, setSearchCount] = useState(0);\n  const [currentMovie, setCurrentMovie] = useState<Movie | null>(null);\n  const [isError, setError] = useState<boolean>(false);\n  const [isLoading, setLoading] = useState(false);\n\n  const handleSearch = (term: string) => {\n    setSearchTerm(term);\n  };\n\n  const handleFind = async () => {\n    console.log('searching with term', currentSearchTerm);\n    setLoading(true);\n    setSearchCount(prevCount => prevCount + 1);\n\n    try {\n      const movieData = await getMovie(currentSearchTerm);\n\n      if (isResponseError(movieData)) {\n        setError(true);\n        setCurrentMovie(null);\n      } else {\n        setError(false);\n        console.log('movie data in app', movieData);\n        const normalizedMovie = normalizeMovieData(movieData);\n\n        setCurrentMovie(normalizedMovie);\n      }\n    } catch (error) {\n      setError(true);\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddMovie = () => {\n    if (currentMovie !== null) {\n      const isAlreadyAdded = movies.some(\n        movie => movie.imdbId === currentMovie.imdbId,\n      );\n\n      if (!isAlreadyAdded) {\n        setMovies(prevMovies => [...prevMovies, currentMovie]);\n      }\n\n      setCurrentMovie(null);\n    } else {\n      setError(true);\n    }\n  };\n\n  useEffect(() => {\n    console.log('Error', isError);\n  }, [isError]);\n\n  useEffect(() => {\n    console.log('Current normalized Movie', currentMovie);\n  }, [currentMovie]);\n\n  useEffect(() => {\n    console.log(currentSearchTerm, 'currentSearch');\n  }, [currentSearchTerm]);\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={cn('input', { 'is-danger': isError })}\n              onChange={(e) => handleSearch(e.target.value)}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"button\"\n              className={cn('button is-light', {\n                'is-loading': isLoading && !isError,\n              })}\n              onClick={handleFind}\n              disabled={!currentSearchTerm}\n            >\n              {currentSearchCount > 0 ? 'Search Again' : 'Find a movie'}\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {currentMovie && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddMovie}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\" data-cy=\"previewContainer\">\n        {currentMovie && (\n          <>\n            <h2 className=\"title\" data-cy=\"movieTitle\">Preview</h2>\n            <MovieCard movie={currentMovie} />\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n","import { MovieData } from '../types/MovieData';\nimport { ResponseError } from '../types/ReponseError';\n\nexport function isResponseError(\n  data: MovieData | ResponseError,\n): data is ResponseError {\n  return (data as ResponseError).Response === 'False';\n}\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\n\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  useEffect(() => {\n    console.log('movies array =', movies);\n  }, [movies]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          movies={movies}\n          setMovies={setMovies}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}